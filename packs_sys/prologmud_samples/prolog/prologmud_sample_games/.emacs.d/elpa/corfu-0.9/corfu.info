This is corfu.info, produced by makeinfo version 6.5 from corfu.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Corfu: (corfu).       Completion Overlay Region FUnction.
END-INFO-DIR-ENTRY


File: corfu.info,  Node: Top,  Next: Introduction,  Up: (dir)

corfu.el - Completion Overlay Region FUnction
*********************************************

* Menu:

* Introduction::
* Features::
* Configuration::
* Key bindings::
* Complementary packages::
* Caveats::
* Contributions::


File: corfu.info,  Node: Introduction,  Next: Features,  Prev: Top,  Up: Top

1 Introduction
**************

Corfu enhances the default completion in region function with a
completion overlay.  The current candidates are shown in a popup below
or above the point.  Corfu can be considered the minimalistic
‘completion-in-region’ counterpart of the Vertico
(https://github.com/minad/vertico) minibuffer UI.

   Corfu is a minimal package (~600 lines of code without whitespace and
comments).  In contrast to the featureful and complex Company package,
Corfu concentrates on the completion UI and does not include custom
completion backends.  Completions are either provided by commands like
‘dabbrev-completion’ or by pluggable backends
(‘completion-at-point-functions’, Capfs).  Many programming language
major modes implement a Capf.  Furthermore the language server packages,
Eglot (https://github.com/joaotavora/eglot) and Lsp-mode
(https://github.com/emacs-lsp/lsp-mode), both use Capfs which talk to
the LSP server to retrieve the completions.

   The Emacs builtin Icomplete is technically comparable to Corfu and
Vertico.  Icomplete implements both ‘completion-in-region’ and
minibuffer completion in a single package.  Corfu and Vertico are two
separate packages in order to optimize the UI for the two distinct use
cases, also leading to code bases which are easier to understand.

   *NOTE*: Corfu uses child frames to show the popup; on non-graphical
displays it will fall back to the default setting of the
‘completion-in-region-function’.

   <https://github.com/minad/corfu/blob/main/screenshot.png?raw=true>


File: corfu.info,  Node: Features,  Next: Configuration,  Prev: Introduction,  Up: Top

2 Features
**********

   • Popup display with scrollbar indicator and arrow key navigation
   • The popup must be summoned explicitly by pressing ‘TAB’
   • The current candidate is inserted with ‘TAB’ and selected with
     ‘RET’
   • Candidates sorting by prefix, string length and alphabetically
   • Completion is automatically terminated after candidate selection
   • Filter string can contain arbitrary characters and spaces (needed
     when filtering with the Orderless
     (https://github.com/oantolin/orderless) completion style)
   • Deferred completion style highlighting for performance
   • Jumping to location/documentation of current candidate (Company
     extension)
   • Support for ‘annotation-function’ and ‘affixation-function’

   Notable non-feature: Timer-based idle completions are not supported.


File: corfu.info,  Node: Configuration,  Next: Key bindings,  Prev: Features,  Up: Top

3 Configuration
***************

Corfu is available from GNU ELPA
(http://elpa.gnu.org/packages/corfu.html), such that it can be installed
directly via ‘package-install’.  After installation, the local minor
mode can be enabled with ‘M-x corfu-mode’.  In order to configure Corfu
and other packages in your init.el, you may want to use ‘use-package’.
I recommend to give Orderless completion a try, which is different from
the familiar prefix TAB completion.  However Corfu works well with the
default completion styles, the use of Orderless is not a necessity.
Here is an example configuration:

     ;; Configure corfu
     (use-package corfu
       ;; Optionally use TAB for cycling, default is `corfu-complete'.
       ;; :bind (:map corfu-map
       ;;        ("TAB" . corfu-next)
       ;;        ("S-TAB" . corfu-previous))

       ;; You may want to enable Corfu only for certain modes.
       ;; :hook ((prog-mode . corfu-mode)
       ;;        (shell-mode . corfu-mode)
       ;;        (eshell-mode . corfu-mode))


       ;; Recommended: Enable Corfu globally.
       ;; This is recommended since dabbrev can be used globally (M-/).
       :init
       (corfu-global-mode)

       :config

       ;; Optionally enable cycling for `corfu-next' and `corfu-previous'.
       ;; (setq corfu-cycle t)
     )

     ;; Optionally use the `orderless' completion style.
     ;; Enable `partial-completion' for files to allow path expansion.
     ;; You may prefer to use `initials' instead of `partial-completion'.
     (use-package orderless
       :init
       (setq completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles . (partial-completion))))))

     ;; Dabbrev works with Corfu
     (use-package dabbrev
       ;; Swap M-/ and C-M-/
       :bind (("M-/" . dabbrev-completion)
              ("C-M-/" . dabbrev-expand)))

     ;; A few more useful configurations...
     (use-package emacs
       :init
       ;; TAB cycle if there are only few candidates
       (setq completion-cycle-threshold 3)

       ;; Enable indentation+completion using the TAB key.
       ;; `completion-at-point' is often bound to M-TAB.
       (setq tab-always-indent 'complete))


File: corfu.info,  Node: Key bindings,  Next: Complementary packages,  Prev: Configuration,  Up: Top

4 Key bindings
**************

Corfu uses a transient keymap ‘corfu-map’ which is active while the
popup is shown.  The keymap defines the following remappings and
bindings:

   • ‘beginning-of-buffer’ -> ‘corfu-first’
   • ‘end-of-buffer’ -> ‘corfu-last’
   • ‘scroll-down-command’ -> ‘corfu-scroll-down’
   • ‘scroll-up-command’ -> ‘corfu-scroll-up’
   • ‘next-line’, ‘down’, ‘M-n’ -> ‘corfu-next’
   • ‘previous-line’, ‘up’, ‘M-p’ -> ‘corfu-previous’
   • ‘completion-at-point’, ‘TAB’ -> ‘corfu-complete’
   • ‘RET’ -> ‘corfu-insert’
   • ‘M-g’ -> ‘corfu-show-location’
   • ‘M-h’ -> ‘corfu-show-documentation’
   • ‘C-g’, ‘ESC ESC ESC’ -> ‘corfu-abort’


File: corfu.info,  Node: Complementary packages,  Next: Caveats,  Prev: Key bindings,  Up: Top

5 Complementary packages
************************

Corfu works well together with all packages providing code completion
via the ‘completion-at-point-functions’.  Furthermore it supports
various completion styles, including the advanced Orderless
(https://github.com/oantolin/orderless) completion style, where the
filtering expressions are separated by spaces.

   You may also want to look into my Vertico
(https://github.com/minad/vertico) package.  Vertico is the minibuffer
counterpart of Corfu.


File: corfu.info,  Node: Caveats,  Next: Contributions,  Prev: Complementary packages,  Up: Top

6 Caveats
*********

Corfu works in most scenarios.  However there are a few known technical
caveats.

   • No support for idle completions.
   • Corfu falls back to the default ‘completion-in-region-function’ on
     non-graphical displays, since is displayed using child frames.
   • The abort handling could be improved, for example the input could
     be undone.
   • The ‘completion-in-region-mode-predicate’ is ignored in order to
     give the completion style full control.  The predicate asks the
     backend if the starting point of the completion has changed.
   • Company kind icons, docsig and match data are not supported
     (‘company-kind’, ‘company-docsig’, ‘company-match’).
   • No support for multi-backends like Company (Implement a
     multi-capf?).
   • No sorting by history, since ‘completion-at-point’ does not
     maintain a history (See branch ‘history’ for a possible solution).


File: corfu.info,  Node: Contributions,  Prev: Caveats,  Up: Top

7 Contributions
***************

Since this package is part of GNU ELPA
(http://elpa.gnu.org/packages/corfu.html) contributions require a
copyright assignment to the FSF.



Tag Table:
Node: Top195
Node: Introduction485
Node: Features2131
Node: Configuration3086
Node: Key bindings5438
Node: Complementary packages6338
Node: Caveats6942
Node: Contributions7997

End Tag Table


Local Variables:
coding: utf-8
End:
